1. Which of the following SOLID principles are violated here?
(Multiple choice)
* Single Responsibility Principle (yes)
* Open-Close principle (yes)
* Liskov Substitution Principle (no)
* Inversion of Control (no, tricky, since it's not a SOLID principle :) )
* Dependency Inversion Principle (yes) 

2. Which principle is violated here and why?

* Open-Close Principle, because Square is not Open for extension.
* Single Responsibility, because Rectangle and Square have the same responsibility
* Liskov Substitution Principle, because Square can't be used instead Rectangle. (helyes)
* Interface Segregation Principle, because there is no Interface implemented.
* Dependency Inversion Principle, because the lowest level Square depends on Rectangle.

3. Which SOLID principle is violated here?
* No violation is present.
* The Shape interface violates the Interface Segregation Principle, since it contains more than one method.
* Circle and Rectangle implements more than one interface, it violates the Interface Segregation Principle.
* Shape contains method declaration that not applicable for all shapes, that violates the Interface Segregation Principle.
* Each Shape implementation violates Single Responsibility Principle, because they calculate area and perimeter too.

4. What rules are violated in the getLeadersOfCompany method?
(Multiple choice)
* Interface Segregation Principle (no)
* Single Responsibility Principle (no)
* Law of Demeter (yes)
* Open-Close principle (yes)
* YAGNI (no)

5. What are the antipatterns, AntipatternUtil.java contains?
* Inner Platform Effect (yes)
* NULL Object (yes)
* Singleton (no)
* Utility Class (yes)
* Recursive Function (no, not an antipattern)
* Magic Number (yes)